using System;
using static PKHeX.Core.LegalityCheckResultCode;

namespace PKHeX.Core;

/// <summary>
/// Provides extension methods for <see cref="LegalityCheckResultCode"/> to convert to human-readable strings.
/// </summary>
public static class LegalityCheckResultCodeExtensions
{
    /// <summary>
    /// Converts a <see cref="LegalityCheckResultCode"/> to its corresponding localized string,
    /// applying formatting with the provided argument if needed.
    /// </summary>
    /// <param name="code">The enum value to humanize</param>
    /// <param name="la">The <see cref="LegalityAnalysis"/> context for the legality check</param>
    /// <param name="argument">Optional argument for formatting the string</param>
    /// <returns>The localized string from <see cref="LegalityCheckStrings"/>, with formatting applied if needed</returns>
    /// <exception cref="ArgumentOutOfRangeException">Thrown when the enum value doesn't have a corresponding string</exception>
    public static string Humanize(this LegalityCheckResultCode code, LegalityAnalysis la, ushort argument = 0)
    {
        var template = GetTemplate(code);
        if (!NeedsFormatting(code))
            return template;

        return string.Format(template, argument);
    }

    /// <summary>
    /// Determines if the given result code needs to be formatted with arguments.
    /// </summary>
    private static bool NeedsFormatting(LegalityCheckResultCode code) => code switch
    {
        // List all codes that need formatting with the argument
        EggFMetLevel_0 => true,
        FormInvalidExpect => true,
        ContestSheenTooLowGEQ_0 => true,
        ContestSheenTooHighLEQ_0 => true,
        MemorySocialTooHighLEQ_0 => true,
        HyperTooLow_0 => true,
        MarkValueOutOfRange_0 => true,
        MoveEvoFCombination_0 => true,
        MoveFDefault_0 => true,
        MoveFExpect_0 => true,
        MoveFExpectSingle_0 => true,
        MoveFLevelUp_0 => true,
        MoveFTMHM_0 => true,
        MoveFTutor_0 => true,
        MoveNincadaEvoF_0 => true,
        MovePPExpectHealed_0 => true,
        MovePPTooHigh_0 => true,
        MovePPUpsTooHigh_0 => true,
        MoveShopMasterInvalid_0 => true,
        MoveShopMasterNotLearned_0 => true,
        MoveShopPurchaseInvalid_0 => true,
        MoveSourceTR => true,
        IVAllEqual_0 => true,
        IVF_COUNT0_31 => true,
        EffortUntrainedCap => true,
        PokerusDaysTooHigh => true,
        PokerusStrainUnobtainable_0 => true,
        RibbonFInvalid_0 => true,
        RibbonMissing_0 => true,
        RibbonMarkingInvalid_0 => true,
        RibbonMarkingAffixed_0 => true,
        StoredSourceInvalid_0 => true,
        TrashBytesExpected_0 => true,
        TransferMoveHM => true,
        TransferOriginFInvalid0_1 => true,

        // If not explicitly listed, assume no formatting needed
        _ => false,
    };

    /// <summary>
    /// Returns the template string for the given result code.
    /// </summary>
    private static string GetTemplate(LegalityCheckResultCode code) => code switch
    {
        // General Strings
        Valid => LegalityCheckStrings.L_AValid,
        LegalityCheckResultCode.Legal => LegalityCheckStrings.L_ALegal,
        Error => LegalityCheckStrings.L_AError,
        AnalysisUnavailable => LegalityCheckStrings.L_AnalysisUnavailable,

        // Ability
        AbilityCapsuleUsed => LegalityCheckStrings.LAbilityCapsuleUsed,
        AbilityPatchUsed => LegalityCheckStrings.LAbilityPatchUsed,
        AbilityPatchRevertUsed => LegalityCheckStrings.LAbilityPatchRevertUsed,
        AbilityFlag => LegalityCheckStrings.LAbilityFlag,
        AbilityHiddenFail => LegalityCheckStrings.LAbilityHiddenFail,
        AbilityHiddenUnavailable => LegalityCheckStrings.LAbilityHiddenUnavailable,
        AbilityMismatch => LegalityCheckStrings.LAbilityMismatch,
        AbilityMismatch3 => LegalityCheckStrings.LAbilityMismatch3,
        AbilityMismatchFlag => LegalityCheckStrings.LAbilityMismatchFlag,
        AbilityMismatchGift => LegalityCheckStrings.LAbilityMismatchGift,
        AbilityMismatchGrotto => LegalityCheckStrings.LAbilityMismatchGrotto,
        AbilityMismatchHordeSafari => LegalityCheckStrings.LAbilityMismatchHordeSafari,
        AbilityMismatchPID => LegalityCheckStrings.LAbilityMismatchPID,
        AbilityMismatchSOS => LegalityCheckStrings.LAbilityMismatchSOS,
        AbilityUnexpected => LegalityCheckStrings.LAbilityUnexpected,

        // Awakened Values
        AwakenedCap => LegalityCheckStrings.LAwakenedCap,
        Awakened0ShouldBeValue_0 => LegalityCheckStrings.LAwakenedShouldBeValue,
        Awakened1ShouldBeValue_0 => LegalityCheckStrings.LAwakenedShouldBeValue,
        Awakened2ShouldBeValue_0 => LegalityCheckStrings.LAwakenedShouldBeValue,
        Awakened3ShouldBeValue_0 => LegalityCheckStrings.LAwakenedShouldBeValue,
        Awakened4ShouldBeValue_0 => LegalityCheckStrings.LAwakenedShouldBeValue,
        Awakened5ShouldBeValue_0 => LegalityCheckStrings.LAwakenedShouldBeValue,

        // Ball
        BallAbility => LegalityCheckStrings.LBallAbility,
        BallEggCherish => LegalityCheckStrings.LBallEggCherish,
        BallEggMaster => LegalityCheckStrings.LBallEggMaster,
        BallEnc => LegalityCheckStrings.LBallEnc,
        BallEncMismatch => LegalityCheckStrings.LBallEncMismatch,
        BallHeavy => LegalityCheckStrings.LBallHeavy,
        BallNone => LegalityCheckStrings.LBallNone,
        BallSpecies => LegalityCheckStrings.LBallSpecies,
        BallSpeciesPass => LegalityCheckStrings.LBallSpeciesPass,
        BallUnavailable => LegalityCheckStrings.LBallUnavailable,

        // Contest
        ContestZero => LegalityCheckStrings.LContestZero,
        ContestZeroSheen => LegalityCheckStrings.LContestZeroSheen,
        ContestSheenTooLowGEQ_0 => LegalityCheckStrings.LContestSheenTooLow_0,
        ContestSheenTooHighLEQ_0 => LegalityCheckStrings.LContestSheenTooHigh_0,

        // Date & Timestamps
        DateOutsideConsoleWindow => LegalityCheckStrings.LDateOutsideConsoleWindow,
        DateTimeClockInvalid => LegalityCheckStrings.LDateTimeClockInvalid,
        DateOutsideDistributionWindow => LegalityCheckStrings.LDateOutsideDistributionWindow,

        // Egg
        EggContest => LegalityCheckStrings.LEggContest,
        EggEXP => LegalityCheckStrings.LEggEXP,
        EggFMetLevel_0 => LegalityCheckStrings.LEggFMetLevel_0,
        EggHatchCycles => LegalityCheckStrings.LEggHatchCycles,
        EggLocation => LegalityCheckStrings.LEggLocation,
        EggLocationInvalid => LegalityCheckStrings.LEggLocationInvalid,
        EggLocationNone => LegalityCheckStrings.LEggLocationNone,
        EggLocationPalPark => LegalityCheckStrings.LEggLocationPalPark,
        EggLocationTrade => LegalityCheckStrings.LEggLocationTrade,
        EggLocationTradeFail => LegalityCheckStrings.LEggLocationTradeFail,
        EggMetLocationFail => LegalityCheckStrings.LEggMetLocationFail,
        EggNature => LegalityCheckStrings.LEggNature,
        EggPokeathlon => LegalityCheckStrings.LEggPokeathlon,
        EggPokerus => LegalityCheckStrings.LEggPokerus,
        EggPP => LegalityCheckStrings.LEggPP,
        EggPPUp => LegalityCheckStrings.LEggPPUp,
        EggRelearnFlags => LegalityCheckStrings.LEggRelearnFlags,
        EggShinyLeaf => LegalityCheckStrings.LEggShinyLeaf,
        EggShinyPokeStar => LegalityCheckStrings.LEggShinyPokeStar,
        EggSpecies => LegalityCheckStrings.LEggSpecies,
        EggUnhatched => LegalityCheckStrings.LEggUnhatched,

        // Encounter
        EncCondition => LegalityCheckStrings.LEncCondition,
        EncConditionBadRNGFrame => LegalityCheckStrings.LEncConditionBadRNGFrame,
        EncConditionBadSpecies => LegalityCheckStrings.LEncConditionBadSpecies,
        EncConditionBlack => LegalityCheckStrings.LEncConditionBlack,
        EncConditionBlackLead => LegalityCheckStrings.LEncConditionBlackLead,
        EncConditionDexNav => LegalityCheckStrings.LEncConditionDexNav,
        EncConditionLead => LegalityCheckStrings.LEncConditionLead,
        EncConditionWhite => LegalityCheckStrings.LEncConditionWhite,
        EncConditionWhiteLead => LegalityCheckStrings.LEncConditionWhiteLead,
        EncGift => LegalityCheckStrings.LEncGift,
        EncGiftEggEvent => LegalityCheckStrings.LEncGiftEggEvent,
        EncGiftIVMismatch => LegalityCheckStrings.LEncGiftIVMismatch,
        EncGiftNicknamed => LegalityCheckStrings.LEncGiftNicknamed,
        EncGiftNotFound => LegalityCheckStrings.LEncGiftNotFound,
        EncGiftPIDMismatch => LegalityCheckStrings.LEncGiftPIDMismatch,
        EncGiftShinyMismatch => LegalityCheckStrings.LEncGiftShinyMismatch,
        EncGiftVersionNotDistributed => LegalityCheckStrings.LEncGiftVersionNotDistributed,
        EncInvalid => LegalityCheckStrings.LEncInvalid,
        EncMasteryInitial => LegalityCheckStrings.LEncMasteryInitial,
        EncTradeChangedNickname => LegalityCheckStrings.LEncTradeChangedNickname,
        EncTradeChangedOT => LegalityCheckStrings.LEncTradeChangedOT,
        EncTradeIndexBad => LegalityCheckStrings.LEncTradeIndexBad,
        EncTradeMatch => LegalityCheckStrings.LEncTradeMatch,
        EncTradeUnchanged => LegalityCheckStrings.LEncTradeUnchanged,
        EncStaticMatch => LegalityCheckStrings.LEncStaticMatch,
        EncStaticPIDShiny => LegalityCheckStrings.LEncStaticPIDShiny,
        EncStaticRelearn => LegalityCheckStrings.LEncStaticRelearn,
        EncTypeMatch => LegalityCheckStrings.LEncTypeMatch,
        EncTypeMismatch => LegalityCheckStrings.LEncTypeMismatch,
        EncUnreleased => LegalityCheckStrings.LEncUnreleased,
        EncUnreleasedEMewJP => LegalityCheckStrings.LEncUnreleasedEMewJP,
        EncUnreleasedHoOArceus => LegalityCheckStrings.LEncUnreleasedHoOArceus,
        EncUnreleasedPtDarkrai => LegalityCheckStrings.LEncUnreleasedPtDarkrai,
        EncUnreleasedPtShaymin => LegalityCheckStrings.LEncUnreleasedPtShaymin,

        // E-Reader
        EReaderAmerica => LegalityCheckStrings.LEReaderAmerica,
        EReaderInvalid => LegalityCheckStrings.LEReaderInvalid,
        EReaderJapan => LegalityCheckStrings.LEReaderJapan,

        // Effort Values
        Effort2Remaining => LegalityCheckStrings.LEffort2Remaining,
        EffortAbove252 => LegalityCheckStrings.LEffortAbove252,
        EffortAbove510 => LegalityCheckStrings.LEffortAbove510,
        EffortAllEqual => LegalityCheckStrings.LEffortAllEqual,
        EffortCap100 => LegalityCheckStrings.LEffortCap100,
        EffortEgg => LegalityCheckStrings.LEffortEgg,
        EffortShouldBeZero => LegalityCheckStrings.LEffortShouldBeZero,
        EffortEXPIncreased => LegalityCheckStrings.LEffortEXPIncreased,
        EffortUntrainedCap => LegalityCheckStrings.LEffortUntrainedCap,

        // Evolution
        EvoInvalid => LegalityCheckStrings.LEvoInvalid,
        EvoTradeReq => LegalityCheckStrings.LEvoTradeReq,
        EvoTradeReqOutsider_0 => LegalityCheckStrings.LEvoTradeReqOutsider,
        EvoTradeRequired => LegalityCheckStrings.LEvoTradeRequired,

        // Form
        FormArgumentHigh => LegalityCheckStrings.LFormArgumentHigh,
        FormArgumentLow => LegalityCheckStrings.LFormArgumentLow,
        FormArgumentNotAllowed => LegalityCheckStrings.LFormArgumentNotAllowed,
        FormArgumentValid => LegalityCheckStrings.LFormArgumentValid,
        FormArgumentInvalid => LegalityCheckStrings.LFormArgumentInvalid,
        FormBattle => LegalityCheckStrings.LFormBattle,
        FormEternal => LegalityCheckStrings.LFormEternal,
        FormEternalInvalid => LegalityCheckStrings.LFormEternalInvalid,
        FormInvalidGame => LegalityCheckStrings.LFormInvalidGame,
        FormInvalidNature => LegalityCheckStrings.LFormInvalidNature,
        FormInvalidRange => LegalityCheckStrings.LFormInvalidRange,
        LegalityCheckResultCode.FormItem => LegalityCheckStrings.LFormItem,
        FormItemInvalid => LegalityCheckStrings.LFormItemInvalid,
        FormParty => LegalityCheckStrings.LFormParty,
        FormPikachuCosplay => LegalityCheckStrings.LFormPikachuCosplay,
        FormPikachuCosplayInvalid => LegalityCheckStrings.LFormPikachuCosplayInvalid,
        FormPikachuEventInvalid => LegalityCheckStrings.LFormPikachuEventInvalid,
        FormInvalidExpect => LegalityCheckStrings.LFormInvalidExpect_0,
        FormValid => LegalityCheckStrings.LFormValid,
        FormVivillon => LegalityCheckStrings.LFormVivillon,
        FormVivillonEventPre => LegalityCheckStrings.LFormVivillonEventPre,
        FormVivillonInvalid => LegalityCheckStrings.LFormVivillonInvalid,
        FormVivillonNonNative => LegalityCheckStrings.LFormVivillonNonNative,

        // Hyper Training
        HyperTooLow_0 => LegalityCheckStrings.LHyperTooLow_0,
        HyperPerfectAll => LegalityCheckStrings.LHyperPerfectAll,
        HyperPerfectOne => LegalityCheckStrings.LHyperPerfectOne,
        HyperPerfectUnavailable => LegalityCheckStrings.LHyperPerfectUnavailable,

        // IVs
        IVAllEqual_0 => LegalityCheckStrings.LIVAllEqual_0,
        IVNotCorrect => LegalityCheckStrings.LIVNotCorrect,
        IVF_COUNT0_31 => LegalityCheckStrings.LIVF_COUNT0_31,

        // Markings
        MarkValueOutOfRange_0 => LegalityCheckStrings.LMarkValueOutOfRange_0,
        MarkValueShouldBeZero => LegalityCheckStrings.LMarkValueShouldBeZero,
        MarkValueUnusedBitsPresent => LegalityCheckStrings.LMarkValueUnusedBitsPresent,

        // Moves
        MoveEvoFCombination_0 => LegalityCheckStrings.LMoveEvoFCombination_0,
        MoveFDefault_0 => LegalityCheckStrings.LMoveFDefault_0,
        MoveFExpect_0 => LegalityCheckStrings.LMoveFExpect_0,
        MoveFExpectSingle_0 => LegalityCheckStrings.LMoveFExpectSingle_0,
        MoveFLevelUp_0 => LegalityCheckStrings.LMoveFLevelUp_0,
        MoveFTMHM_0 => LegalityCheckStrings.LMoveFTMHM_0,
        MoveFTutor_0 => LegalityCheckStrings.LMoveFTutor_0,
        MoveNincadaEvoF_0 => LegalityCheckStrings.LMoveNincadaEvoF_0,
        MovePPExpectHealed_0 => LegalityCheckStrings.LMovePPExpectHealed_0,
        MovePPTooHigh_0 => LegalityCheckStrings.LMovePPTooHigh_0,
        MovePPUpsTooHigh_0 => LegalityCheckStrings.LMovePPUpsTooHigh_0,
        MoveShopMasterInvalid_0 => LegalityCheckStrings.LMoveShopMasterInvalid_0,
        MoveShopMasterNotLearned_0 => LegalityCheckStrings.LMoveShopMasterNotLearned_0,
        MoveShopPurchaseInvalid_0 => LegalityCheckStrings.LMoveShopPurchaseInvalid_0,
        MoveSourceTR => LegalityCheckStrings.LMoveSourceTR,

        // Memory
        MemorySocialTooHighLEQ_0 => LegalityCheckStrings.LMemorySocialTooHigh_0,

        // Pokerus
        PokerusDaysTooHigh => LegalityCheckStrings.LPokerusDaysTooHigh_0,
        PokerusStrainUnobtainable_0 => LegalityCheckStrings.LPokerusStrainUnobtainable_0,

        // Ribbons
        RibbonFInvalid_0 => LegalityCheckStrings.LRibbonFInvalid_0,
        RibbonMissing_0 => LegalityCheckStrings.LRibbonFMissing_0,
        RibbonMarkingInvalid_0 => LegalityCheckStrings.LRibbonMarkingFInvalid_0,
        RibbonMarkingAffixed_0 => LegalityCheckStrings.LRibbonMarkingAffixedF_0,

        // Storage
        StoredSourceInvalid_0 => LegalityCheckStrings.LStoredSourceInvalid_0,

        // Trash Bytes
        TrashBytesExpected_0 => LegalityCheckStrings.LTrashBytesExpected_0,

        // Transfer
        TransferMoveHM => LegalityCheckStrings.LTransferMoveHM,
        TransferOriginFInvalid0_1 => LegalityCheckStrings.LTransferOriginFInvalid0_1,

        // Do not add a default case here. We want compilation to fail if a new enum value is added without a corresponding string.
        EncGiftLanguageNotDistributed => LegalityCheckStrings.LEncGiftLanguageNotDistributed,
        EncGiftRegionNotDistributed => LegalityCheckStrings.LEncGiftRegionNotDistributed,
        EncTradeShouldHaveEvolvedToSpecies_0 => LegalityCheckStrings.LEncTradeShouldHaveEvolvedToSpecies_0,
        FatefulGiftMissing => LegalityCheckStrings.LFatefulGiftMissing,
        FatefulInvalid => LegalityCheckStrings.LFatefulInvalid,
        FatefulMissing => LegalityCheckStrings.LFatefulMissing,
        FatefulMystery => LegalityCheckStrings.LFatefulMystery,
        FatefulMysteryMissing => LegalityCheckStrings.LFatefulMysteryMissing,
        FavoriteMarkingUnavailable => LegalityCheckStrings.LFavoriteMarkingUnavailable,
        FormInvalidRangeLEQ_0 => LegalityCheckStrings.LFormInvalidRangeLEQ_0,
        G1CatchRateChain => LegalityCheckStrings.LG1CatchRateChain,
        G1CatchRateEvo => LegalityCheckStrings.LG1CatchRateEvo,
        G1CatchRateItem => LegalityCheckStrings.LG1CatchRateItem,
        G1CatchRateMatchPrevious => LegalityCheckStrings.LG1CatchRateMatchPrevious,
        G1CatchRateMatchTradeback => LegalityCheckStrings.LG1CatchRateMatchTradeback,
        G1CatchRateNone => LegalityCheckStrings.LG1CatchRateNone,
        G1CharNick => LegalityCheckStrings.LG1CharNick,
        G1CharOT => LegalityCheckStrings.LG1CharOT,
        G1GBEncounter => LegalityCheckStrings.LG1GBEncounter,
        G1MoveExclusive => LegalityCheckStrings.LG1MoveExclusive,
        G1MoveLearnSameLevel => LegalityCheckStrings.LG1MoveLearnSameLevel,
        G1MoveTradeback => LegalityCheckStrings.LG1MoveTradeback,
        G1OTEvent => LegalityCheckStrings.LG1OTEvent,
        G1OTGender => LegalityCheckStrings.LG1OTGender,
        G1Stadium => LegalityCheckStrings.LG1Stadium,
        G1StadiumInternational => LegalityCheckStrings.LG1StadiumInternational,
        G1StadiumJapanese => LegalityCheckStrings.LG1StadiumJapanese,
        G1TradebackPreEvoMove => LegalityCheckStrings.LG1TradebackPreEvoMove,
        G1Type1Fail => LegalityCheckStrings.LG1Type1Fail,
        G1Type2Fail => LegalityCheckStrings.LG1Type2Fail,
        G1TypeMatch1 => LegalityCheckStrings.LG1TypeMatch1,
        G1TypeMatch2 => LegalityCheckStrings.LG1TypeMatch2,
        G1TypeMatchPorygon => LegalityCheckStrings.LG1TypeMatchPorygon,
        G1TypePorygonFail => LegalityCheckStrings.LG1TypePorygonFail,
        G1TypePorygonFail1 => LegalityCheckStrings.LG1TypePorygonFail1,
        G1TypePorygonFail2 => LegalityCheckStrings.LG1TypePorygonFail2,
        G2InvalidTilePark => LegalityCheckStrings.LG2InvalidTilePark,
        G2InvalidTileR14 => LegalityCheckStrings.LG2InvalidTileR14,
        G2InvalidTileSafari => LegalityCheckStrings.LG2InvalidTileSafari,
        G2InvalidTileTreeID => LegalityCheckStrings.LG2InvalidTileTreeID,
        G2InvalidTileTreeNotFound => LegalityCheckStrings.LG2InvalidTileTreeNotFound,
        G2TreeID => LegalityCheckStrings.LG2TreeID,
        G2OTGender => LegalityCheckStrings.LG2OTGender,
        G3EReader => LegalityCheckStrings.LG3EReader,
        G3OTGender => LegalityCheckStrings.LG3OTGender,
        G4InvalidTileR45Surf => LegalityCheckStrings.LG4InvalidTileR45Surf,
        G5ID_N => LegalityCheckStrings.LG5ID_N,
        G5IVAll30 => LegalityCheckStrings.LG5IVAll30,
        G5OTGenderN => LegalityCheckStrings.LG5OTGenderN,
        G5PIDShinyGrotto => LegalityCheckStrings.LG5PIDShinyGrotto,
        G5PIDShinyN => LegalityCheckStrings.LG5PIDShinyN,
        G5SparkleInvalid => LegalityCheckStrings.LG5SparkleInvalid,
        G5SparkleRequired => LegalityCheckStrings.LG5SparkleRequired,
        GanbaruStatTooHigh => LegalityCheckStrings.LGanbaruStatTooHigh,
        GenderInvalidNone => LegalityCheckStrings.LGenderInvalidNone,
        GeoBadOrder => LegalityCheckStrings.LGeoBadOrder,
        GeoHardwareInvalid => LegalityCheckStrings.LGeoHardwareInvalid,
        GeoHardwareRange => LegalityCheckStrings.LGeoHardwareRange,
        GeoHardwareValid => LegalityCheckStrings.LGeoHardwareValid,
        GeoMemoryMissing => LegalityCheckStrings.LGeoMemoryMissing,
        GeoNoCountryHT => LegalityCheckStrings.LGeoNoCountryHT,
        GeoNoRegion => LegalityCheckStrings.LGeoNoRegion,
        HintEvolvesToSpecies_0 => LegalityCheckStrings.LHintEvolvesToSpecies_0,
        HintEvolvesToRareForm_0 => LegalityCheckStrings.LHintEvolvesToRareForm_0,
        ItemEgg => LegalityCheckStrings.LItemEgg,
        ItemUnreleased => LegalityCheckStrings.LItemUnreleased,
        LevelEXPThreshold => LegalityCheckStrings.LLevelEXPThreshold,
        LevelEXPTooHigh => LegalityCheckStrings.LLevelEXPTooHigh,
        LevelMetBelow => LegalityCheckStrings.LLevelMetBelow,
        LevelMetGift => LegalityCheckStrings.LLevelMetGift,
        LevelMetGiftFail => LegalityCheckStrings.LLevelMetGiftFail,
        LevelMetSane => LegalityCheckStrings.LLevelMetSane,
        MemoryArgBadCatch => LegalityCheckStrings.LMemoryArgBadCatch,
        MemoryArgBadHatch => LegalityCheckStrings.LMemoryArgBadHatch,
        MemoryArgBadHT => LegalityCheckStrings.LMemoryArgBadHT,
        MemoryArgBadID => LegalityCheckStrings.LMemoryArgBadID,
        MemoryArgBadItem => LegalityCheckStrings.LMemoryArgBadItem,
        MemoryArgBadLocation => LegalityCheckStrings.LMemoryArgBadLocation,
        MemoryArgBadMove => LegalityCheckStrings.LMemoryArgBadMove,
        MemoryArgBadOTEgg => LegalityCheckStrings.LMemoryArgBadOTEgg,
        MemoryArgBadSpecies => LegalityCheckStrings.LMemoryArgBadSpecies,
        MemoryArgSpecies => LegalityCheckStrings.LMemoryArgSpecies,
        MemoryCleared => LegalityCheckStrings.LMemoryCleared,
        MemoryF_0_Valid => LegalityCheckStrings.LMemoryF_0_Valid,
        MemoryFeelInvalid_H => LegalityCheckStrings.LMemoryFeelInvalid_H,
        MemoryHTFlagInvalid => LegalityCheckStrings.LMemoryHTFlagInvalid,
        MemoryHTGender_0 => LegalityCheckStrings.LMemoryHTGender_0,
        MemoryHTLanguage => LegalityCheckStrings.LMemoryHTLanguage,
        MemoryIndexArgHT => LegalityCheckStrings.LMemoryIndexArgHT,
        MemoryIndexFeel => LegalityCheckStrings.LMemoryIndexFeel,
        MemoryIndexFeelHT09 => LegalityCheckStrings.LMemoryIndexFeelHT09,
        MemoryIndexID => LegalityCheckStrings.LMemoryIndexID,
        MemoryIndexIntensity => LegalityCheckStrings.LMemoryIndexIntensity,
        MemoryIndexIntensityHT1 => LegalityCheckStrings.LMemoryIndexIntensityHT1,
        MemoryIndexIntensityMin_01 => LegalityCheckStrings.LMemoryIndexIntensityMin_01,
        MemoryIndexLinkHT => LegalityCheckStrings.LMemoryIndexLinkHT,
        MemoryIndexVar => LegalityCheckStrings.LMemoryIndexVar,
        MemoryMissingHT => LegalityCheckStrings.LMemoryMissingHT,
        MemoryMissingOT => LegalityCheckStrings.LMemoryMissingOT,
        MemorySocialZero => LegalityCheckStrings.LMemorySocialZero,
        MemoryStatAffectionHT0 => LegalityCheckStrings.LMemoryStatAffectionHT0,
        MemoryStatAffectionOT0 => LegalityCheckStrings.LMemoryStatAffectionOT0,
        MemoryStatFriendshipHT0 => LegalityCheckStrings.LMemoryStatFriendshipHT0,
        MemoryStatFriendshipOTBaseEvent => LegalityCheckStrings.LMemoryStatFriendshipOTBaseEvent,
        MemoryStatFullness_0 => LegalityCheckStrings.LMemoryStatFullness_0,
        MemoryStatFullnessLEQ_0 => LegalityCheckStrings.LMemoryStatFullnessLEQ_0,
        MemoryStatEnjoyment_0 => LegalityCheckStrings.LMemoryStatEnjoyment_0,
        MetDetailTimeOfDay => LegalityCheckStrings.LMetDetailTimeOfDay,
        MoveEggFIncompatible0_1 => LegalityCheckStrings.LMoveEggFIncompatible0_1,
        MoveEggIncompatible => LegalityCheckStrings.LMoveEggIncompatible,
        MoveEggIncompatibleEvent => LegalityCheckStrings.LMoveEggIncompatibleEvent,
        MoveEggInherited => LegalityCheckStrings.LMoveEggInherited,
        MoveEggInheritedTutor => LegalityCheckStrings.LMoveEggInheritedTutor,
        MoveEggInvalid => LegalityCheckStrings.LMoveEggInvalid,
        MoveEggInvalidEvent => LegalityCheckStrings.LMoveEggInvalidEvent,
        MoveEggInvalidEventLevelUp => LegalityCheckStrings.LMoveEggInvalidEventLevelUp,
        MoveEggInvalidEventLevelUpGift => LegalityCheckStrings.LMoveEggInvalidEventLevelUpGift,
        MoveEggInvalidEventTMHM => LegalityCheckStrings.LMoveEggInvalidEventTMHM,
        MoveEggInvalidEventTutor => LegalityCheckStrings.LMoveEggInvalidEventTutor,
        MoveEggLevelUp => LegalityCheckStrings.LMoveEggLevelUp,
        MoveEggMissing => LegalityCheckStrings.LMoveEggMissing,
        MoveEggMoveGift => LegalityCheckStrings.LMoveEggMoveGift,
        MoveEggTMHM => LegalityCheckStrings.LMoveEggTMHM,
        MoveEventEggLevelUp => LegalityCheckStrings.LMoveEventEggLevelUp,
        MoveEvoFHigher => LegalityCheckStrings.LMoveEvoFHigher,
        MoveEvoFLower => LegalityCheckStrings.LMoveEvoFLower,
        MoveKeldeoMismatch => LegalityCheckStrings.LMoveKeldeoMismatch,
        MoveNincada => LegalityCheckStrings.LMoveNincada,
        MoveNincadaEvo => LegalityCheckStrings.LMoveNincadaEvo,
        MoveSourceShared => LegalityCheckStrings.LMoveSourceShared,
        MoveSourceSharedF => LegalityCheckStrings.LMoveSourceSharedF,
        MovesShouldMatchRelearnMoves => LegalityCheckStrings.LMovesShouldMatchRelearnMoves,
        MoveRelearnDexNav => LegalityCheckStrings.LMoveRelearnDexNav,
        MoveRelearnUnderground => LegalityCheckStrings.LMoveRelearnUnderground,
        MoveRelearnEgg => LegalityCheckStrings.LMoveRelearnEgg,
        MoveRelearnEggMissing => LegalityCheckStrings.LMoveRelearnEggMissing,
        MoveRelearnFExpect_0 => LegalityCheckStrings.LMoveRelearnFExpect_0,
        MoveRelearnFMiss_0 => LegalityCheckStrings.LMoveRelearnFMiss_0,
        MoveRelearnInvalid => LegalityCheckStrings.LMoveRelearnInvalid,
        MoveRelearnNone => LegalityCheckStrings.LMoveRelearnNone,
        MoveShopAlphaMoveShouldBeMastered => LegalityCheckStrings.LMoveShopAlphaMoveShouldBeMastered,
        MoveShopAlphaMoveShouldBeOther => LegalityCheckStrings.LMoveShopAlphaMoveShouldBeOther,
        MoveShopAlphaMoveShouldBeZero => LegalityCheckStrings.LMoveShopAlphaMoveShouldBeZero,
        MoveSourceDefault => LegalityCheckStrings.LMoveSourceDefault,
        MoveSourceDuplicate => LegalityCheckStrings.LMoveSourceDuplicate,
        MoveSourceEgg => LegalityCheckStrings.LMoveSourceEgg,
        MoveSourceEggEvent => LegalityCheckStrings.LMoveSourceEggEvent,
        MoveSourceEmpty => LegalityCheckStrings.LMoveSourceEmpty,
        MoveSourceInvalid => LegalityCheckStrings.LMoveSourceInvalid,
        MoveSourceInvalidSketch => LegalityCheckStrings.LMoveSourceInvalidSketch,
        MoveSourceLevelUp => LegalityCheckStrings.LMoveSourceLevelUp,
        MoveSourceRelearn => LegalityCheckStrings.LMoveSourceRelearn,
        MoveSourceSpecial => LegalityCheckStrings.LMoveSourceSpecial,
        MoveSourceTMHM => LegalityCheckStrings.LMoveSourceTMHM,
        MoveSourceTutor => LegalityCheckStrings.LMoveSourceTutor,
        NickFlagEggNo => LegalityCheckStrings.LNickFlagEggNo,
        NickFlagEggYes => LegalityCheckStrings.LNickFlagEggYes,
        NickInvalidChar => LegalityCheckStrings.LNickInvalidChar,
        NickLengthLong => LegalityCheckStrings.LNickLengthLong,
        NickLengthShort => LegalityCheckStrings.LNickLengthShort,
        NickMatchLanguage => LegalityCheckStrings.LNickMatchLanguage,
        NickMatchLanguageEgg => LegalityCheckStrings.LNickMatchLanguageEgg,
        NickMatchLanguageEggFail => LegalityCheckStrings.LNickMatchLanguageEggFail,
        NickMatchLanguageFail => LegalityCheckStrings.LNickMatchLanguageFail,
        NickMatchLanguageFlag => LegalityCheckStrings.LNickMatchLanguageFlag,
        NickMatchNoOthers => LegalityCheckStrings.LNickMatchNoOthers,
        NickMatchNoOthersFail => LegalityCheckStrings.LNickMatchNoOthersFail,
        OTLanguage => LegalityCheckStrings.LOTLanguage,
        OTLanguageShouldBe_0 => LegalityCheckStrings.LOTLanguageShouldBe_0,
        OTLanguageShouldBe_0or1 => LegalityCheckStrings.LOTLanguageShouldBe_0or1,
        OTLanguageShouldBeLeq_0 => LegalityCheckStrings.LOTLanguageShouldBeLeq_0,
        OTLanguageCannotPlayOnVersion_0 => LegalityCheckStrings.LOTLanguageCannotPlayOnVersion_0,
        OTLanguageCannotTransferFromConsoleRegion_0 => LegalityCheckStrings.LOTLanguageCannotTransferFromConsoleRegion_0,
        OTLong => LegalityCheckStrings.LOTLong,
        OTShort => LegalityCheckStrings.LOTShort,
        OTSuspicious => LegalityCheckStrings.LOTSuspicious,
        OT_IDEqual => LegalityCheckStrings.LOT_IDEqual,
        OT_IDs0 => LegalityCheckStrings.LOT_IDs0,
        OT_SID0 => LegalityCheckStrings.LOT_SID0,
        OT_SID0Invalid => LegalityCheckStrings.LOT_SID0Invalid,
        OT_TID0 => LegalityCheckStrings.LOT_TID0,
        OT_IDInvalid => LegalityCheckStrings.LOT_IDInvalid,
        PIDEncryptWurmple => LegalityCheckStrings.LPIDEncryptWurmple,
        PIDEncryptZero => LegalityCheckStrings.LPIDEncryptZero,
        PIDEqualsEC => LegalityCheckStrings.LPIDEqualsEC,
        PIDGenderMatch => LegalityCheckStrings.LPIDGenderMatch,
        PIDGenderMismatch => LegalityCheckStrings.LPIDGenderMismatch,
        PIDNatureMatch => LegalityCheckStrings.LPIDNatureMatch,
        PIDNatureMismatch => LegalityCheckStrings.LPIDNatureMismatch,
        PIDTypeMismatch => LegalityCheckStrings.LPIDTypeMismatch,
        PIDZero => LegalityCheckStrings.LPIDZero,
        RibbonAllValid => LegalityCheckStrings.LRibbonAllValid,
        RibbonEgg => LegalityCheckStrings.LRibbonEgg,
        StatDynamaxInvalid => LegalityCheckStrings.LStatDynamaxInvalid,
        StatIncorrectHeight => LegalityCheckStrings.LStatIncorrectHeight,
        StatIncorrectHeightCopy => LegalityCheckStrings.LStatIncorrectHeightCopy,
        StatIncorrectHeightValue => LegalityCheckStrings.LStatIncorrectHeightValue,
        StatIncorrectWeight => LegalityCheckStrings.LStatIncorrectWeight,
        StatIncorrectWeightValue => LegalityCheckStrings.LStatIncorrectWeightValue,
        StatInvalidHeightWeight => LegalityCheckStrings.LStatInvalidHeightWeight,
        StatIncorrectCP => LegalityCheckStrings.LStatIncorrectCP,
        StatGigantamaxInvalid => LegalityCheckStrings.LStatGigantamaxInvalid,
        StatGigantamaxValid => LegalityCheckStrings.LStatGigantamaxValid,
        StatNatureInvalid => LegalityCheckStrings.LStatNatureInvalid,
        StatBattleVersionInvalid => LegalityCheckStrings.LStatBattleVersionInvalid,
        StatNobleInvalid => LegalityCheckStrings.LStatNobleInvalid,
        StatAlphaInvalid => LegalityCheckStrings.LStatAlphaInvalid,
        StoredSourceEgg => LegalityCheckStrings.LStoredSourceEgg,
        SuperComplete => LegalityCheckStrings.LSuperComplete,
        SuperDistro => LegalityCheckStrings.LSuperDistro,
        SuperEgg => LegalityCheckStrings.LSuperEgg,
        SuperNoComplete => LegalityCheckStrings.LSuperNoComplete,
        SuperNoUnlocked => LegalityCheckStrings.LSuperNoUnlocked,
        SuperUnavailable => LegalityCheckStrings.LSuperUnavailable,
        SuperUnused => LegalityCheckStrings.LSuperUnused,
        TeraTypeIncorrect => LegalityCheckStrings.LTeraTypeIncorrect,
        TeraTypeMismatch => LegalityCheckStrings.LTeraTypeMismatch,
        TradeNotAvailable => LegalityCheckStrings.LTradeNotAvailable,
        TrainerIDNoSeed => LegalityCheckStrings.LTrainerIDNoSeed,
        TransferBad => LegalityCheckStrings.LTransferBad,
        TransferCurrentHandlerInvalid => LegalityCheckStrings.LTransferCurrentHandlerInvalid,
        TransferEgg => LegalityCheckStrings.LTransferEgg,
        TransferEggLocationTransporter => LegalityCheckStrings.LTransferEggLocationTransporter,
        TransferEggMetLevel => LegalityCheckStrings.LTransferEggMetLevel,
        TransferEggVersion => LegalityCheckStrings.LTransferEggVersion,
        TransferFlagIllegal => LegalityCheckStrings.LTransferFlagIllegal,
        TransferHTFlagRequired => LegalityCheckStrings.LTransferHTFlagRequired,
        TransferHTMismatchName => LegalityCheckStrings.LTransferHTMismatchName,
        TransferHTMismatchGender => LegalityCheckStrings.LTransferHTMismatchGender,
        TransferHTMismatchLanguage => LegalityCheckStrings.LTransferHTMismatchLanguage,
        TransferMet => LegalityCheckStrings.LTransferMet,
        TransferNotPossible => LegalityCheckStrings.LTransferNotPossible,
        TransferMetLocation => LegalityCheckStrings.LTransferMetLocation,
        TransferMove => LegalityCheckStrings.LTransferMove,
        TransferMoveG4HM => LegalityCheckStrings.LTransferMoveG4HM,
        TransferNature => LegalityCheckStrings.LTransferNature,
        TransferObedienceLevel => LegalityCheckStrings.LTransferObedienceLevel,
        TransferKoreanGen4 => LegalityCheckStrings.LTransferKoreanGen4,
        TransferPIDECBitFlip => LegalityCheckStrings.LTransferPIDECBitFlip,
        TransferPIDECEquals => LegalityCheckStrings.LTransferPIDECEquals,
        TransferPIDECXor => LegalityCheckStrings.LTransferPIDECXor,
        TransferTrackerMissing => LegalityCheckStrings.LTransferTrackerMissing,
        TransferTrackerShouldBeZero => LegalityCheckStrings.LTransferTrackerShouldBeZero,
        TrashBytesExpected => LegalityCheckStrings.LTrashBytesExpected,
        TrashBytesMismatchInitial => LegalityCheckStrings.LTrashBytesMismatchInitial,
        TrashBytesMissingTerminator => LegalityCheckStrings.LTrashBytesMissingTerminator,
        TrashBytesShouldBeEmpty => LegalityCheckStrings.LTrashBytesShouldBeEmpty,
        TrashBytesUnexpected => LegalityCheckStrings.LTrashBytesUnexpected,
        WordFilterInvalidCharacter_0 => LegalityCheckStrings.LWordFilterInvalidCharacter_0,
        WordFilterFlaggedPattern_01 => LegalityCheckStrings.LWordFilterFlaggedPattern_01,
        WordFilterTooManyNumbers_0 => LegalityCheckStrings.LWordFilterTooManyNumbers_0,
        BulkCloneDetectedDetails => LegalityCheckStrings.LBulkCloneDetectedDetails,
        BulkCloneDetectedTracker => LegalityCheckStrings.LBulkCloneDetectedTracker,
        BulkSharingEncryptionConstantGenerationSame => LegalityCheckStrings.LBulkSharingEncryptionConstantGenerationSame,
        BulkSharingEncryptionConstantGenerationDifferent => LegalityCheckStrings.LBulkSharingEncryptionConstantGenerationDifferent,
        BulkSharingEncryptionConstantRNGType => LegalityCheckStrings.LBulkSharingEncryptionConstantRNGType,
        BulkSharingPIDGenerationDifferent => LegalityCheckStrings.LBulkSharingPIDGenerationDifferent,
        BulkSharingPIDGenerationSame => LegalityCheckStrings.LBulkSharingPIDGenerationSame,
        BulkSharingPIDRNGType => LegalityCheckStrings.LBulkSharingPIDRNGType,
        BulkDuplicateMysteryGiftEggReceived => LegalityCheckStrings.LBulkDuplicateMysteryGiftEggReceived,
        BulkSharingTrainerID => LegalityCheckStrings.LBulkSharingTrainerID,
        BulkSharingTrainerVersion => LegalityCheckStrings.LBulkSharingTrainerVersion,

        >= MAX => throw new ArgumentOutOfRangeException(nameof(code), code, null),
    };
}
